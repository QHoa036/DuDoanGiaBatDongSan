#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ti·ªán √≠ch k·∫øt n·ªëi ngrok ƒë·ªÉ t·∫°o URL public cho ·ª©ng d·ª•ng Streamlit

M√¥-ƒëun n√†y cung c·∫•p c√°c ti·ªán √≠ch ƒë·ªÉ:
- Thi·∫øt l·∫≠p k·∫øt n·ªëi Ngrok ƒë·ªÉ t·∫°o URL c√¥ng khai cho ·ª©ng d·ª•ng Streamlit
- Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi Ngrok
- Qu·∫£n l√Ω c√°c tunnel ƒëang ho·∫°t ƒë·ªông
"""

# MARK: - Th∆∞ vi·ªán

import os
import sys
import logging
import streamlit as st
from typing import List, Dict, Optional
from pyngrok import ngrok, conf
from .logger_utils import get_logger, log_execution_time

# MARK: - C·∫•u h√¨nh Ghi nh·∫≠t k√Ω

def configure_ngrok_logging(log_level=logging.CRITICAL + 1):
    """
    C·∫•u h√¨nh logger c·ªßa ngrok ƒë·ªÉ ho√†n to√†n t·∫Øt t·∫•t c·∫£ c√°c tin nh·∫Øn log.
    ƒê·∫∑t m·ª©c ƒë·ªô log l√† CRITICAL + 1 ƒë·ªÉ t·∫Øt t·∫•t c·∫£ c√°c tin nh·∫Øn log, k·ªÉ c·∫£ c√°c tin nh·∫Øn CRITICAL.
    """
    # ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ ki·ªÉm so√°t ngrok CLI
    os.environ['NGROK_LOG_LEVEL'] = 'critical'
    os.environ['NGROK_SILENT'] = 'true'
    os.environ['NGROK_NO_LOGS'] = 'true'  # Th√™m bi·∫øn m√¥i tr∆∞·ªùng m·ªõi

    # T·∫Øt t·∫•t c·∫£ c√°c logger li√™n quan
    logging.getLogger("pyngrok").disabled = True
    logging.getLogger("pyngrok.process").disabled = True
    logging.getLogger("pyngrok.ngrok").disabled = True

    # C·∫•u h√¨nh t·∫•t c·∫£ c√°c logger li√™n quan ƒë·∫øn ngrok v√† http
    for logger_name in ["ngrok", "ngrok.client", "ngrok.tunnel", "urllib3", "requests", "http.client", "pyngrok", "pyngrok.process", "pyngrok.ngrok"]:
        logger = logging.getLogger(logger_name)
        logger.setLevel(log_level)
        logger.propagate = False  # NgƒÉn ch·∫∑n lan truy·ªÅn logs
        # X√≥a t·∫•t c·∫£ c√°c handler hi·ªán c√≥
        for handler in logger.handlers[:]:
            logger.removeHandler(handler)

        # Th√™m m·ªôt handler r·ªóng (null handler) ƒë·ªÉ ch·∫∑n t·∫•t c·∫£ logs
        logger.addHandler(logging.NullHandler())

    # Ghi ƒë√® c√°c h√†m ghi log c·ªßa ngrok ƒë·ªÉ ho√†n to√†n v√¥ hi·ªáu h√≥a
    class SilentFilter(logging.Filter):
        def filter(self, record):
            # Lo·∫°i b·ªè t·∫•t c·∫£ m·ªçi tin nh·∫Øn log
            return False

    # √Åp d·ª•ng b·ªô l·ªçc v√¥ hi·ªáu h√≥a cho logger c·∫•p cao nh·∫•t
    root_logger = logging.getLogger()
    ngrok_filter = SilentFilter()
    root_logger.addFilter(ngrok_filter)

# MARK: - K·∫øt n·ªëi Ngrok

@log_execution_time
def run_ngrok() -> Optional[str]:
    """
    K·∫øt n·ªëi ·ª©ng d·ª•ng Streamlit v·ªõi ngrok ƒë·ªÉ t·∫°o URL c√¥ng khai
    """
    # S·ª≠ d·ª•ng logger v·ªõi m·ª©c ƒë·ªô CRITICAL+1 ƒë·ªÉ t·∫Øt ho√†n to√†n c√°c log
    logger = get_logger(__name__, level=logging.CRITICAL+1)

    try:
        # Ki·ªÉm tra xem token Ngrok ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ch∆∞a
        ngrok_token = os.environ.get("NGROK_TOKEN")

        if not ngrok_token:
            logger.warning("Kh√¥ng t√¨m th·∫•y NGROK_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng")
            st.warning("""
            ### ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y NGROK_TOKEN

            ƒê·ªÉ t·∫°o URL c√¥ng khai, h√£y th√™m NGROK_TOKEN v√†o file .env:
            ```
            NGROK_TOKEN=your_ngrok_token
            ```
            L·∫•y token t·ª´ [ngrok.com](https://dashboard.ngrok.com/get-started/your-authtoken)
            """)
            return None

        # C·∫•u h√¨nh Ngrok v·ªõi token
        conf.get_default().auth_token = ngrok_token

        # ƒêƒÉng k√Ω b·ªô l·ªçc log ƒë·ªÉ ch·∫∑n ho√†n to√†n log c·ªßa ngrok
        class NgrokLogFilter(logging.Filter):
            def filter(self, record):
                # Tr·∫£ v·ªÅ False ƒë·ªÉ lo·∫°i b·ªè t·∫•t c·∫£ c√°c log c·ªßa ngrok
                return False

        # √Åp d·ª•ng b·ªô l·ªçc cho t·∫•t c·∫£ c√°c logger li√™n quan ƒë·∫øn ngrok
        ngrok_filter = NgrokLogFilter()
        logging.getLogger('ngrok').addFilter(ngrok_filter)
        logging.getLogger('pyngrok').addFilter(ngrok_filter)

        # T·∫Øt ho√†n to√†n c√°c log c·ªßa ngrok v√† pyngrok
        logging.getLogger('ngrok').setLevel(logging.CRITICAL + 1)
        logging.getLogger('pyngrok').setLevel(logging.CRITICAL + 1)

        # TƒÉng th·ªùi gian timeout ƒë·ªÉ tr√°nh l·ªói
        from pyngrok import process
        process._default_pyngrok_config.startup_timeout = 10

        # Ch·∫∑n stdout/stderr khi kh·ªüi t·∫°o ngrok
        original_stdout = sys.stdout
        original_stderr = sys.stderr
        devnull = open(os.devnull, 'w')
        sys.stdout = devnull
        sys.stderr = devnull

        # T·∫Øt log c·ªßa process module
        logging.getLogger('pyngrok.process').propagate = False

        # Ki·ªÉm tra v√† ƒë√≥ng c√°c tunnel hi·ªán c√≥
        existing_tunnels = ngrok.get_tunnels()
        if existing_tunnels:
            for tunnel in existing_tunnels:
                ngrok.disconnect(tunnel.public_url)
        else:
            logger.debug("Kh√¥ng t√¨m th·∫•y tunnel n√†o ƒëang ho·∫°t ƒë·ªông")

        # Ch·∫∑n t·∫•t c·∫£ ƒë·∫ßu ra khi k·∫øt n·ªëi Ngrok
        original_stdout = sys.stdout
        original_stderr = sys.stderr
        dev_null = open(os.devnull, 'w')
        sys.stdout = dev_null
        sys.stderr = dev_null

        try:
            # X√°c ƒë·ªãnh c·ªïng Streamlit
            streamlit_port = int(os.environ.get("STREAMLIT_PORT", 8501))

            # S·ª≠ d·ª•ng host_header ƒë·ªÉ ƒë·∫£m b·∫£o Streamlit ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
            ngrok_tunnel = ngrok.connect(
                addr=streamlit_port,
                bind_tls=True,
                options={
                    "bind_tls": True,
                    "host_header": f"localhost:{streamlit_port}"
                }
            )
        finally:
            # Kh√¥i ph·ª•c ƒë·∫ßu ra g·ªëc b·∫•t k·ªÉ c√≥ l·ªói hay kh√¥ng
            sys.stdout = original_stdout
            sys.stderr = original_stderr
            dev_null.close()

        # L·∫•y URL c√¥ng khai m√† kh√¥ng ghi log
        public_url = ngrok_tunnel.public_url

        # Hi·ªÉn th·ªã URL c√¥ng khai cho ng∆∞·ªùi d√πng
        st.success(f"""
        ### üåê URL C√¥ng Khai ƒê√£ S·∫µn S√†ng!

        ·ª®ng d·ª•ng c·ªßa b·∫°n c√≥ th·ªÉ truy c·∫≠p c√¥ng khai t·∫°i:

        **[{public_url}]({public_url})**

        URL n√†y s·∫Ω ho·∫°t ƒë·ªông cho ƒë·∫øn khi ·ª©ng d·ª•ng Streamlit d·ª´ng l·∫°i.
        """)

        # Kh√¥ng hi·ªÉn th·ªã th√¥ng tin URL trong console, ch·ªâ hi·ªÉn th·ªã trong Streamlit UI

        return public_url

    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o tunnel Ngrok: {str(e)}", exc_info=True)
        # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
        st.error(f"""
        ### ‚ùå L·ªói khi thi·∫øt l·∫≠p k·∫øt n·ªëi Ngrok

        Chi ti·∫øt l·ªói: {str(e)}

        Vui l√≤ng ki·ªÉm tra:
        1. Token Ngrok c√≥ h·ª£p l·ªá kh√¥ng
        2. K·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n
        3. C·ªïng 8501 ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi Streamlit
        """)
        return None


# MARK: - B·ªô nh·ªõ ƒë·ªám

# C√†i ƒë·∫∑t b·ªô nh·ªõ ƒë·ªám ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c
@st.cache_data(ttl=5)  # Cache trong 5 gi√¢y
def _cached_get_tunnels():
    return ngrok.get_tunnels()

# MARK: - Ki·ªÉm tra tr·∫°ng th√°i

@log_execution_time
def check_ngrok_status() -> List[Dict[str, str]]:
    """
    Ki·ªÉm tra tr·∫°ng th√°i c·ªßa c√°c k·∫øt n·ªëi Ngrok hi·ªán t·∫°i
    """
    # Kh·ªüi t·∫°o logger
    logger = get_logger(__name__)

    try:
        # S·ª≠ d·ª•ng h√†m ƒë∆∞·ª£c cache ƒë·ªÉ l·∫•y tunnels
        tunnels = _cached_get_tunnels()

        # S·ª≠ d·ª•ng list comprehension ƒë·ªÉ t·∫°o danh s√°ch th√¥ng tin nhanh h∆°n
        tunnels_info = [{
            "public_url": tunnel.public_url,
            "local_url": f"localhost:{tunnel.config.get('addr', 'unknown')}",
            "proto": tunnel.proto,
            "name": tunnel.name
        } for tunnel in tunnels]

        # Ch·ªâ hi·ªÉn th·ªã th√¥ng tin trong giao di·ªán n·∫øu c√≥ tunnel
        if tunnels_info:
            # S·ª≠ d·ª•ng container ƒë·ªÉ t·ªëi ∆∞u hi·ªÉn th·ªã
            with st.container():
                st.success(f"**ƒêang c√≥ {len(tunnels_info)} k·∫øt n·ªëi Ngrok ho·∫°t ƒë·ªông**")
                # S·ª≠ d·ª•ng columns ƒë·ªÉ hi·ªÉn th·ªã nhi·ªÅu URL trong c√πng m·ªôt h√†ng
                if len(tunnels_info) > 1:
                    cols = st.columns(min(len(tunnels_info), 2))
                    for i, info in enumerate(tunnels_info):
                        with cols[i % 2]:
                            st.write(f"URL: [{info['public_url']}]({info['public_url']}) -> {info['local_url']}")
                else:
                    for info in tunnels_info:
                        st.write(f"URL: [{info['public_url']}]({info['public_url']}) -> {info['local_url']}")

        return tunnels_info

    except Exception as e:
        logger.exception(f"L·ªói khi ki·ªÉm tra tr·∫°ng th√°i Ngrok")
        st.error(f"L·ªói khi ki·ªÉm tra tr·∫°ng th√°i Ngrok")
        return []
