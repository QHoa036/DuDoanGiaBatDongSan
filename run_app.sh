#!/bin/bash

# Script kh·ªüi ch·∫°y ·ª©ng d·ª•ng demo D·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n Vi·ªát Nam
# v·ªõi Streamlit v√† Ngrok

echo "===== KH·ªûI CH·∫†Y ·ª®NG D·ª§NG D·ª∞ ƒêO√ÅN GI√Å B·∫§T ƒê·ªòNG S·∫¢N VI·ªÜT NAM ====="

# Ph√°t hi·ªán h·ªá ƒëi·ªÅu h√†nh
DETECT_OS="unknown"
case "$(uname -s)" in
Darwin*)
    DETECT_OS="macos"
    ;;
Linux*)
    DETECT_OS="linux"
    ;;
CYGWIN* | MINGW* | MSYS*)
    DETECT_OS="windows"
    ;;
esac

echo "H·ªá ƒëi·ªÅu h√†nh ƒë∆∞·ª£c ph√°t hi·ªán: $DETECT_OS"

# Ki·ªÉm tra th∆∞ m·ª•c App
if [ ! -d "App" ]; then
    echo "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c App. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c d·ª± √°n!"
    exit 1
fi

# Ki·ªÉm tra file requirements.txt
if [ ! -f "requirements.txt" ]; then
    echo "‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file requirements.txt. S·∫Ω s·ª≠ d·ª•ng danh s√°ch th∆∞ vi·ªán m·∫∑c ƒë·ªãnh."
fi

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán h·ªá th·ªëng c·∫ßn thi·∫øt d·ª±a tr√™n OS
echo "Ki·ªÉm tra c√°c th∆∞ vi·ªán h·ªá th·ªëng..."

install_system_dependencies() {
    case "$DETECT_OS" in
    macos)
        if ! command -v brew &>/dev/null; then
            echo "Homebrew kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t Homebrew tr∆∞·ªõc."
            echo "Xem h∆∞·ªõng d·∫´n t·∫°i: https://brew.sh"
            exit 1
        fi
        # C√†i ƒë·∫∑t python-setuptools n·∫øu ch∆∞a c√≥
        if ! brew list python-setuptools &>/dev/null; then
            echo "C√†i ƒë·∫∑t python-setuptools..."
            brew install python-setuptools
        fi
        ;;
    linux)
        if command -v apt-get &>/dev/null; then
            echo "Ki·ªÉm tra v√† c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán tr√™n h·ªá th·ªëng Debian/Ubuntu..."
            sudo apt-get update
            sudo apt-get install -y python3-setuptools python3-pip python3-venv
        elif command -v yum &>/dev/null; then
            echo "Ki·ªÉm tra v√† c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán tr√™n h·ªá th·ªëng CentOS/RHEL/Fedora..."
            sudo yum install -y python3-setuptools python3-pip python3-virtualenv
        else
            echo "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh tr√¨nh qu·∫£n l√Ω g√≥i tr√™n Linux. Vui l√≤ng c√†i ƒë·∫∑t python3-setuptools, python3-pip, python3-venv th·ªß c√¥ng."
        fi
        ;;
    windows)
        echo "ƒêang ch·∫°y tr√™n Windows th√¥ng qua MSYS/MINGW/Cygwin..."
        echo "Vui l√≤ng ƒë·∫£m b·∫£o r·∫±ng Python v√† pip ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t."
        ;;
    *)
        echo "H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: $DETECT_OS"
        echo "Vui l√≤ng c√†i ƒë·∫∑t Python, pip, v√† setuptools th·ªß c√¥ng."
        ;;
    esac
}

install_system_dependencies

# K√≠ch ho·∫°t m√¥i tr∆∞·ªùng ·∫£o d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
activate_venv() {
    case "$DETECT_OS" in
    macos | linux)
        source venv/bin/activate
        ;;
    windows)
        # Trong Windows v·ªõi MSYS/MINGW/Cygwin, s·ª≠ d·ª•ng c√∫ ph√°p kh√°c
        source venv/Scripts/activate
        ;;
    *)
        echo "Kh√¥ng th·ªÉ k√≠ch ho·∫°t m√¥i tr∆∞·ªùng ·∫£o tr√™n h·ªá ƒëi·ªÅu h√†nh kh√¥ng x√°c ƒë·ªãnh"
        exit 1
        ;;
    esac
}

create_venv() {
    case "$DETECT_OS" in
    macos | linux)
        python3 -m venv venv
        ;;
    windows)
        python -m venv venv
        ;;
    *)
        echo "Kh√¥ng th·ªÉ t·∫°o m√¥i tr∆∞·ªùng ·∫£o tr√™n h·ªá ƒëi·ªÅu h√†nh kh√¥ng x√°c ƒë·ªãnh"
        exit 1
        ;;
    esac
}

# K√≠ch ho·∫°t m√¥i tr∆∞·ªùng ·∫£o n·∫øu t·ªìn t·∫°i
if [ -d "venv" ]; then
    echo "üöÄ K√≠ch ho·∫°t m√¥i tr∆∞·ªùng ·∫£o..."
    activate_venv
else
    echo "T·∫°o m√¥i tr∆∞·ªùng ·∫£o m·ªõi..."
    create_venv
    activate_venv

    echo "C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt..."
    pip install --upgrade pip setuptools wheel

    # C√†i ƒë·∫∑t t·ª´ requirements.txt n·∫øu t·ªìn t·∫°i
    if [ -f "requirements.txt" ]; then
        echo "C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán t·ª´ requirements.txt..."
        pip install -r requirements.txt
    else
        echo "C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán m·∫∑c ƒë·ªãnh..."
        pip install selenium webdriver-manager pandas numpy pyspark matplotlib seaborn streamlit pyngrok ngrok folium plotly
    fi
fi

# H√†m hi·ªÉn th·ªã menu l·ª±a ch·ªçn
show_menu() {
    echo ""
    echo "MENU CH√çNH:"
    echo "1. Thu th·∫≠p d·ªØ li·ªáu b·∫•t ƒë·ªông s·∫£n (1_fetch_real_estate.py)"
    echo "2. L·∫•y th√¥ng tin chi ti·∫øt b·∫•t ƒë·ªông s·∫£n (2_property_details.py)"
    echo "3. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu (3_preprocess_data.py)"
    echo "4. L∆∞u tr·ªØ d·ªØ li·ªáu tr√™n HDFS (4_HDFS_storage.py)"
    echo "5. Hu·∫•n luy·ªán m√¥ h√¨nh (5_model_training.py)"
    echo "6. Kh·ªüi ch·∫°y ·ª©ng d·ª•ng Streamlit (6_streamlit_app.py)"
    echo "7. Tr·ª±c quan h√≥a d·ªØ li·ªáu (7_visualize_data.py)"
    echo "8. Ch·∫°y to√†n b·ªô quy tr√¨nh (1-7)"
    echo "9. Tho√°t"
    echo ""
    echo "L·ª±a ch·ªçn c·ªßa b·∫°n (1-9): "
}

# H√†m ch·∫°y file Python
run_python_file() {
    file_name=$1
    echo "===== ƒêANG TH·ª∞C THI $file_name ====="

    # ƒê∆∞·ªùng d·∫´n Python d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
    get_python_path() {
        case "$DETECT_OS" in
        macos | linux)
            echo "./venv/bin/python"
            ;;
        windows)
            echo "./venv/Scripts/python"
            ;;
        *)
            echo "python" # S·ª≠ d·ª•ng Python h·ªá th·ªëng n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c OS
            ;;
        esac
    }

    # ƒê·∫£m b·∫£o m√¥i tr∆∞·ªùng ·∫£o ƒë∆∞·ª£c k√≠ch ho·∫°t
    if [ -d "venv" ]; then
        # S·ª≠ d·ª•ng Python t·ª´ m√¥i tr∆∞·ªùng ·∫£o
        $(get_python_path) "App/$file_name"
    else
        echo "M√¥i tr∆∞·ªùng ·∫£o ch∆∞a ƒë∆∞·ª£c t·∫°o. ƒêang t·∫°o m√¥i tr∆∞·ªùng..."
        create_venv
        activate_venv
        pip install --upgrade pip setuptools wheel

        # C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán t·ª´ requirements.txt
        if [ -f "requirements.txt" ]; then
            echo "C√†i ƒë·∫∑t th∆∞ vi·ªán t·ª´ file requirements.txt..."
            pip install -r requirements.txt
        else
            echo "Kh√¥ng t√¨m th·∫•y file requirements.txt. C√†i ƒë·∫∑t th∆∞ vi·ªán m·∫∑c ƒë·ªãnh..."
            pip install selenium webdriver-manager pandas numpy pyspark matplotlib seaborn streamlit pyngrok ngrok folium plotly
        fi

        $(get_python_path) "App/$file_name"
    fi

    # Ki·ªÉm tra l·ªói
    if [ $? -ne 0 ]; then
        echo "L·ªói khi th·ª±c thi $file_name. Ki·ªÉm tra l·∫°i!"
        return 1
    else
        echo "Th·ª±c thi $file_name th√†nh c√¥ng!"
        return 0
    fi
}

# H√†m ch·∫°y Streamlit v·ªõi Ngrok
run_streamlit_with_ngrok() {
    echo "B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng ngrok ƒë·ªÉ t·∫°o URL public kh√¥ng? (y/n)"
    read use_ngrok

    # L·∫•y ƒë∆∞·ªùng d·∫´n Python v√† Streamlit d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
    get_python_path() {
        case "$DETECT_OS" in
        macos | linux)
            echo "./venv/bin/python"
            ;;
        windows)
            echo "./venv/Scripts/python"
            ;;
        *)
            echo "python" # S·ª≠ d·ª•ng Python h·ªá th·ªëng n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c OS
            ;;
        esac
    }

    get_streamlit_path() {
        case "$DETECT_OS" in
        macos | linux)
            echo "./venv/bin/streamlit"
            ;;
        windows)
            echo "./venv/Scripts/streamlit"
            ;;
        *)
            echo "streamlit" # S·ª≠ d·ª•ng streamlit h·ªá th·ªëng n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c OS
            ;;
        esac
    }

    # ƒê·∫£m b·∫£o m√¥i tr∆∞·ªùng ·∫£o ƒë∆∞·ª£c k√≠ch ho·∫°t
    if [ ! -d "venv" ]; then
        echo "M√¥i tr∆∞·ªùng ·∫£o ch∆∞a ƒë∆∞·ª£c t·∫°o. ƒêang t·∫°o m√¥i tr∆∞·ªùng..."
        create_venv
        activate_venv
        pip install --upgrade pip setuptools wheel

        # C√†i ƒë·∫∑t t·ª´ requirements.txt
        if [ -f "requirements.txt" ]; then
            echo "C√†i ƒë·∫∑t th∆∞ vi·ªán t·ª´ file requirements.txt..."
            pip install -r requirements.txt
        else
            echo "Kh√¥ng t√¨m th·∫•y file requirements.txt. C√†i ƒë·∫∑t th∆∞ vi·ªán m·∫∑c ƒë·ªãnh..."
            pip install selenium webdriver-manager pandas numpy pyspark matplotlib seaborn streamlit pyngrok ngrok folium plotly
        fi
    fi

    if [[ $use_ngrok == "y" || $use_ngrok == "Y" ]]; then
        # Ki·ªÉm tra xem file .env.local c√≥ t·ªìn t·∫°i v√† c√≥ ch·ª©a NGROK_TOKEN
        if [ -f ".env.local" ] && grep -q "NGROK_TOKEN=" ".env.local"; then
            # ƒê·ªçc token t·ª´ file .env.local
            ngrok_token=$(grep "NGROK_TOKEN=" ".env.local" | cut -d'=' -f2)

            # Ki·ªÉm tra xem token c√≥ gi√° tr·ªã hay kh√¥ng ho·∫∑c c√≥ ph·∫£i l√† placeholder
            if [ -z "$ngrok_token" ] || [ "$ngrok_token" = "<your_ngrok_token>" ]; then
                echo "‚ö†Ô∏è C·∫ßn c√≥ ngrok token h·ª£p l·ªá ƒë·ªÉ ti·∫øp t·ª•c."
                echo "üîë Vui l√≤ng nh·∫≠p ngrok authtoken c·ªßa b·∫°n (ƒëƒÉng k√Ω t·∫°i ngrok.com):"
                read -s ngrok_token
                
                # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p g√¨ ho·∫∑c nh·∫≠p placeholder
                if [ -z "$ngrok_token" ] || [ "$ngrok_token" = "<your_ngrok_token>" ]; then
                    echo "‚ùå B·∫°n ph·∫£i cung c·∫•p ngrok token h·ª£p l·ªá ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y!"
                    echo "üõë ƒêang tho√°t ch∆∞∆°ng tr√¨nh..."
                    return 1
                fi
                
                # C·∫≠p nh·∫≠t file .env.local v·ªõi token m·ªõi
                sed -i '' "s/NGROK_TOKEN=.*/NGROK_TOKEN=$ngrok_token/" .env.local
            else
                echo "üîë ƒê√£ t√¨m th·∫•y ngrok token trong file .env.local"
            fi
        else
            echo "üîë Nh·∫≠p ngrok authtoken c·ªßa b·∫°n (ƒëƒÉng k√Ω t·∫°i ngrok.com):"
            read -s ngrok_token
            
            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p g√¨ ho·∫∑c nh·∫≠p placeholder
            if [ -z "$ngrok_token" ] || [ "$ngrok_token" = "<your_ngrok_token>" ]; then
                echo "‚ùå B·∫°n ph·∫£i cung c·∫•p ngrok token h·ª£p l·ªá ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y!"
                echo "üõë ƒêang tho√°t ch∆∞∆°ng tr√¨nh..."
                return 1
            fi
            
            # L∆∞u token v√†o file .env.local
            if [ -f ".env.local" ]; then
                echo "NGROK_TOKEN=$ngrok_token" >>.env.local
            else
                echo "NGROK_TOKEN=$ngrok_token" >.env.local
            fi
        fi

        echo "‚öôÔ∏è C·∫•u h√¨nh ngrok v√† kh·ªüi ch·∫°y Streamlit..."

        # L·∫•y ƒë∆∞·ªùng d·∫´n Python trong m√¥i tr∆∞·ªùng ·∫£o
        PYTHON_PATH=$(get_python_path)
        echo "S·ª≠ d·ª•ng Python t·∫°i: $PYTHON_PATH"

        # Ch·∫°y script ngrok t·ª´ th∆∞ m·ª•c App
        $PYTHON_PATH App/run_with_ngrok.py
    else
        echo "Kh·ªüi ch·∫°y Streamlit tr√™n localhost:8501..."
        $(get_streamlit_path) run App/6_streamlit_app.py
    fi
}

# H√†m ch·∫°y to√†n b·ªô quy tr√¨nh
run_full_pipeline() {
    for i in {1..5} {7..7}; do
        file_name="${i}_*.py"
        python_file=$(find App -name "$file_name" -type f)
        if [ -n "$python_file" ]; then
            base_name=$(basename "$python_file")
            run_python_file "$base_name"
            if [ $? -ne 0 ]; then
                echo "D·ª´ng quy tr√¨nh do l·ªói."
                return 1
            fi
        fi
    done

    # Ch·∫°y Streamlit cu·ªëi c√πng
    run_streamlit_with_ngrok
    return 0
}

# V√≤ng l·∫∑p ch√≠nh
while true; do
    show_menu
    read choice

    case $choice in
    1)
        run_python_file "1_fetch_real_estate.py"
        ;;
    2)
        run_python_file "2_property_details.py"
        ;;
    3)
        run_python_file "3_preprocess_data.py"
        ;;
    4)
        run_python_file "4_HDFS_storage.py"
        ;;
    5)
        run_python_file "5_model_training.py"
        ;;
    6)
        run_streamlit_with_ngrok
        ;;
    7)
        run_python_file "7_visualize_data.py"
        ;;
    8)
        run_full_pipeline
        ;;
    9)
        echo "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng. T·∫°m bi·ªát!"
        exit 0
        ;;
    *)
        echo "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 1-9."
        ;;
    esac
done
