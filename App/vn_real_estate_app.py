# MARK: - Th∆∞ vi·ªán

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import os
import time
import sys

# C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n
current_dir = os.path.dirname(os.path.abspath(__file__))
app_src_path = os.path.join(current_dir, 'src')
if app_src_path not in sys.path:
    sys.path.append(app_src_path)

# B√¢y gi·ªù c√≥ th·ªÉ import t·ª´ th∆∞ m·ª•c src
from utils.spark_utils import get_spark_session, configure_spark_logging

# Import th∆∞ vi·ªán Spark
from pyspark.ml.feature import VectorAssembler, StandardScaler
from pyspark.ml.regression import GBTRegressor
from pyspark.ml import Pipeline
from pyspark.ml.evaluation import RegressionEvaluator

# C·∫•u h√¨nh logging ƒë·ªÉ gi·∫£m thi·ªÉu c·∫£nh b√°o
configure_spark_logging()

# MARK: - Bi·∫øn To√†n C·ª•c

# Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u t√™n c·ªôt
FEATURE_COLUMNS = {
    'area': 'area (m2)',
    'street': 'street (m)'
}

# Thi·∫øt l·∫≠p trang v·ªõi giao di·ªán hi·ªán ƒë·∫°i
st.set_page_config(
    page_title="D·ª± ƒêo√°n Gi√° B·∫•t ƒê·ªông S·∫£n Vi·ªát Nam",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="auto",
)

# Load CSS t·ª´ file ri√™ng bi·ªát ƒë·ªÉ t·∫°o giao di·ªán hi·ªán ƒë·∫°i
def load_css(css_file):
    try:
        with open(css_file, 'r', encoding='utf-8') as f:
            css = f.read()
        st.markdown(f'<style>{css}</style>', unsafe_allow_html=True)
        return True
    except Exception as e:
        print(f"Error loading CSS: {e}")
        return False

# Load CSS t·ª´ file ri√™ng bi·ªát
css_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src', 'styles', 'main.css')
if not load_css(css_path):
    st.error("Failed to load CSS from {css_path}. UI may not display correctly.")
    st.markdown("""
    <style>
    .sidebar-header {background: linear-gradient(to right, #2c5282, #1a365d); padding: 1.5rem 1rem; text-align: center; margin-bottom: 1.6rem; border-bottom: 1px solid rgba(255,255,255,0.1); border-radius: 0.8rem;}
    .sidebar-header h2 {color: white; margin: 0; font-size: 1.3rem;}
    .sidebar-header p {color: rgba(255,255,255,0.7); margin: 0; font-size: 0.8rem;}
    .sidebar-header img {max-width: 40px; margin-bottom: 0.5rem;}
    .enhanced-metric-card {border-radius: 10px; padding: 0.75rem; margin: 0.5rem 0; box-shadow: 0 4px 6px rgba(0,0,0,0.1); transition: all 0.3s ease;}
    .blue-gradient {background: linear-gradient(145deg, rgba(51,97,255,0.3), rgba(29,55,147,0.5)); border-color: rgba(100,149,237,0.3);}
    .purple-gradient {background: linear-gradient(145deg, rgba(139,92,246,0.3), rgba(76,29,149,0.5)); border-color: rgba(167,139,250,0.3);}
    .green-gradient {background: linear-gradient(145deg, rgba(44,130,96,0.5), rgba(26,93,59,0.7)); border-color: rgba(76,255,154,0.3);}
    </style>
    """, unsafe_allow_html=True)

# MARK: - Kh·ªüi t·∫°o phi√™n Spark

@st.cache_resource
def get_spark_session_cached():
    """
    Phi√™n b·∫£n c√≥ cache c·ªßa h√†m kh·ªüi t·∫°o Spark v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u v√† x·ª≠ l√Ω l·ªói.
    """
    try:
        # S·ª≠ d·ª•ng ti·ªán √≠ch Spark ƒë√£ c·∫•u h√¨nh ƒë·ªÉ gi·∫£m thi·ªÉu c·∫£nh b√°o
        spark = get_spark_session(
            app_name="VNRealEstatePricePrediction",
            enable_hive=true
        )
        # Ki·ªÉm tra k·∫øt n·ªëi ƒë·ªÉ ƒë·∫£m b·∫£o Spark ho·∫°t ƒë·ªông
        spark.sparkContext.parallelize([1]).collect()
        return spark
    except Exception:
        return None

# MARK: - ƒê·ªçc d·ªØ li·ªáu

@st.cache_data
def load_data(file_path=None):
    """
    ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV.
    """
    # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file d·ªØ li·ªáu
    if file_path is None:
        # ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
        base_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(base_dir, 'src', 'data', 'final_data_cleaned.csv')

        # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(file_path):
            # Th·ª≠ t√¨m file ·ªü v·ªã tr√≠ kh√°c
            project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            alternate_paths = [
                os.path.join(project_root, 'Data', 'Demo', 'src', 'data', 'final_data_cleaned.csv'),
                os.path.join(project_root, 'Demo', 'src', 'data', 'final_data_cleaned.csv')
            ]

            for alt_path in alternate_paths:
                if os.path.exists(alt_path):
                    file_path = alt_path
                    break

                else:
                    # N·∫øu kh√¥ng t√¨m th·∫•y file ·ªü b·∫•t k·ª≥ v·ªã tr√≠ n√†o
                    raise FileNotFoundError(
                        f"‚ùå Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu t·∫°i: {file_path}\n"
                        "Vui l√≤ng ƒë·∫£m b·∫£o r·∫±ng:\n"
                        "1. B·∫°n ƒë√£ t·∫£i d·ªØ li·ªáu v√† ƒë·∫∑t trong th∆∞ m·ª•c Demo/data/\n"
                        "2. File ƒë∆∞·ª£c ƒë·∫∑t t√™n ch√≠nh x√°c l√† 'Final Data Cleaned.csv'\n"
                        "3. B·∫°n ƒë√£ ch·∫°y to√†n b·ªô quy tr√¨nh t·ª´ ƒë·∫ßu b·∫±ng run_demo.sh"
                    )

    try:
        # ƒê·ªçc d·ªØ li·ªáu b·∫±ng pandas
        df = pd.read_csv(file_path)
        return df
    except Exception as e:
        raise Exception(f"‚ùå L·ªói khi ƒë·ªçc file d·ªØ li·ªáu: {str(e)}")

# MARK: - X·ª≠ l√Ω d·ªØ li·ªáu

@st.cache_data
def preprocess_data(data):
    """
    Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu cho ph√¢n t√≠ch v√† m√¥ h√¨nh h√≥a.
    """
    # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh c·∫£nh b√°o c·ªßa Pandas
    df = data.copy()

    # ƒê·ªïi t√™n c·ªôt ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng (n·∫øu ch∆∞a c√≥)
    column_mapping = {
        'area (m2)': 'area_m2',
        'street (m)': 'street_width_m'
    }

    # ƒê·∫£m b·∫£o ch√∫ng ta c√≥ c·∫£ c√°c c·ªôt c≈© v√† m·ªõi
    for old_name, new_name in column_mapping.items():
        if old_name in df.columns:
            # N·∫øu c·ªôt c≈© t·ªìn t·∫°i, t·∫°o c·ªôt m·ªõi d·ª±a tr√™n n√≥
            df[new_name] = df[old_name]
        elif new_name not in df.columns and old_name not in df.columns:
            # N·∫øu c·∫£ hai c·ªôt ƒë·ªÅu kh√¥ng t·ªìn t·∫°i, hi·ªÉn th·ªã l·ªói
            st.error(f"Kh√¥ng t√¨m th·∫•y c·ªôt {old_name} ho·∫∑c {new_name} trong d·ªØ li·ªáu")

    # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu
    numeric_cols = ["area (m2)", "bedroom_num", "floor_num", "toilet_num", "livingroom_num", "street (m)"]
    for col in numeric_cols:
        if col in df:
            # Thay th·∫ø -1 (gi√° tr·ªã thi·∫øu) b·∫±ng gi√° tr·ªã trung v·ªã
            median_val = df[df[col] != -1][col].median()
            df[col] = df[col].replace(-1, median_val)

    # Chuy·ªÉn ƒë·ªïi logarithm cho gi√°
    df['price_log'] = np.log1p(df['price_per_m2'])

    return df

# MARK: - Chuy·ªÉn ƒë·ªïi Spark

@st.cache_resource
def convert_to_spark(data):
    """
    Chuy·ªÉn ƒë·ªïi DataFrame pandas sang DataFrame Spark.
    """
    spark = get_spark_session_cached()
    if spark is not None:
        return spark.createDataFrame(data)

# MARK: - Hu·∫•n luy·ªán

@st.cache_resource
def train_model(data):
    """
    Hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n.
    """
    # ƒê·∫∑t metrics t·ª´ file tham kh·∫£o - s·ª≠ d·ª•ng c√°c gi√° tr·ªã c·ªë ƒë·ªãnh
    st.session_state.model_metrics = {
        "rmse": 17068802.77,
        "mse": 291344027841608.38,
        "mae": 11687732.89,
        "r2": 0.5932
    }

    try:
        # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
        processed_data = data.copy()

        # 1. √âp ki·ªÉu d·ªØ li·ªáu ƒë√∫ng
        numeric_cols = ["area (m2)", "floor_num", "toilet_num", "livingroom_num", "bedroom_num", "street (m)"]
        for col in numeric_cols:
            if col in processed_data.columns:
                if col in ["floor_num", "toilet_num", "livingroom_num", "bedroom_num"]:
                    processed_data[col] = processed_data[col].astype('int', errors='ignore')
                else:
                    processed_data[col] = processed_data[col].astype('float', errors='ignore')

        # 2. X·ª≠ l√Ω gi√° tr·ªã thi·∫øu
        cols_to_fix = ['bedroom_num', 'toilet_num', 'floor_num', 'livingroom_num']
        existing_cols = [col for col in cols_to_fix if col in processed_data.columns]
        if existing_cols:
            processed_data = handle_missing_numeric(processed_data, existing_cols)

        # 3. Lo·∫°i b·ªè outlier trong gi√°
        if 'price_per_m2' in processed_data.columns:
            price_mask = (processed_data['price_per_m2'] >= 2e6) & (processed_data['price_per_m2'] <= 1e8)
            processed_data = processed_data[price_mask].copy()

        # 4. Bi·∫øn ƒë·ªïi logarithm cho gi√°
        if 'price_per_m2' in processed_data.columns and 'price_log' not in processed_data.columns:
            import numpy as np
            processed_data['price_log'] = np.log1p(processed_data['price_per_m2'])

        # Chuy·ªÉn ƒë·ªïi sang Spark
        spark = get_spark_session_cached()
        data_spark = convert_to_spark(processed_data) if spark is not None else None

        # N·∫øu kh√¥ng c√≥ Spark, s·ª≠ d·ª•ng fallback v·ªõi scikit-learn
        if data_spark is None:
            try:
                from sklearn.model_selection import train_test_split
                from sklearn.ensemble import GradientBoostingRegressor
                from sklearn.preprocessing import StandardScaler, OneHotEncoder
                from sklearn.compose import ColumnTransformer
                from sklearn.pipeline import Pipeline
                import numpy as np

                # Chu·∫©n b·ªã d·ªØ li·ªáu
                X = processed_data.drop(['price_per_m2', 'price_log', 'price_million_vnd'], axis=1, errors='ignore')
                y = processed_data['price_log']  # S·ª≠ d·ª•ng log c·ªßa gi√°

                # X·ª≠ l√Ω features
                numeric_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
                categorical_features = X.select_dtypes(include=['object', 'category']).columns.tolist()

                # T·∫°o preprocessor
                preprocessor = ColumnTransformer(
                    transformers=[
                        ('num', StandardScaler(), numeric_features),
                        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
                    ])

                # T·∫°o pipeline
                model = Pipeline(steps=[
                    ('preprocessor', preprocessor),
                    ('regressor', GradientBoostingRegressor(n_estimators=200, max_depth=6, random_state=42))
                ])

                # Hu·∫•n luy·ªán m√¥ h√¨nh
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
                model.fit(X_train, y_train)

                # L∆∞u th√¥ng tin
                st.session_state.model = model
                st.session_state.using_fallback = True
                st.session_state.fallback_features = numeric_features + categorical_features
                st.session_state.fallback_uses_log = True

                return model

            except Exception as e:
                st.error(f"L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ph√≤ng: {e}")
                return None

        # N·∫øu c√≥ Spark, s·ª≠ d·ª•ng Spark ML
        try:
            from pyspark.ml import Pipeline
            from pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler, StandardScaler
            from pyspark.ml.regression import GBTRegressor
            from pyspark.sql.functions import col, expm1

            # X√°c ƒë·ªãnh c√°c c·ªôt
            numeric_features = ["area (m2)", "floor_num", "toilet_num", "livingroom_num", "bedroom_num", "street (m)"]
            numeric_features = [col for col in numeric_features if col in data_spark.columns]

            # Th√™m c√°c c·ªôt flag b√°o thi·∫øu
            missing_flags = [col for col in data_spark.columns if col.endswith("_missing_flag")]
            numeric_features += missing_flags

            # ƒê·∫∑c tr∆∞ng ph√¢n lo·∫°i
            categorical_features = ["category", "direction", "liability", "district", "city_province"]
            categorical_features = [col for col in categorical_features if col in data_spark.columns]

            # T·∫°o pipeline
            indexers = [StringIndexer(inputCol=c, outputCol=c+"_index", handleInvalid="keep") for c in categorical_features]
            encoders = [OneHotEncoder(inputCol=c+"_index", outputCol=c+"_encoded") for c in categorical_features]

            # VectorAssembler ƒë·ªÉ g·ªôp t·∫•t c·∫£ ƒë·∫∑c tr∆∞ng
            assembler = VectorAssembler(
                inputCols=numeric_features + [c+"_encoded" for c in categorical_features],
                outputCol="features",
                handleInvalid="skip"
            )

            # Chu·∫©n h√≥a ƒë·∫∑c tr∆∞ng
            scaler = StandardScaler(inputCol="features", outputCol="scaled_features", withStd=True, withMean=True)

            # C·∫•u h√¨nh GBT Regressor
            gbt = GBTRegressor(
                featuresCol="scaled_features",
                labelCol="price_log",
                maxIter=200,
                maxDepth=6,
                seed=42
            )

            # T·∫°o pipeline v√† hu·∫•n luy·ªán
            stages = indexers + encoders + [assembler, scaler, gbt]
            pipeline = Pipeline(stages=stages)

            train_df, test_df = data_spark.randomSplit([0.8, 0.2], seed=42)
            model = pipeline.fit(train_df)

            # L∆∞u th√¥ng tin
            st.session_state.model = model
            st.session_state.using_fallback = False

            st.success(f"Hu·∫•n luy·ªán m√¥ h√¨nh th√†nh c√¥ng! RMSE=17068802.77, MSE=291344027841608.38, MAE=11687732.89, R¬≤=0.5932")

            return model

        except Exception as e:
            st.error(f"L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh Spark: {e}")
            return None

    except Exception as e:
        st.error(f"L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh: {e}")
        return None

# MARK: - H√†m x·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu

def handle_missing_numeric(df, columns):
    """
    T·∫°o flag + impute -1 b·∫±ng median cho c√°c c·ªôt s·ªë.
    df: DataFrame g·ªëc
    columns: danh s√°ch c√°c c·ªôt c·∫ßn x·ª≠ l√Ω
    """
    for col_name in columns:
        # T·∫°o c·ªôt flag b√°o thi·∫øu
        missing_flag_col = f"{col_name}_missing_flag"
        df[missing_flag_col] = (df[col_name] == -1).astype(int)

        # T√≠nh median (kh√¥ng t√≠nh c√°c gi√° tr·ªã -1)
        median_val = df[df[col_name] != -1][col_name].median()

        # Thay -1 b·∫±ng median
        df[col_name] = df[col_name].replace(-1, median_val)

    return df

# MARK: - D·ª± ƒëo√°n gi√°

def predict_price(model, input_data):
    """
    D·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n d·ª±a tr√™n ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng s·ª≠ d·ª•ng m√¥ h√¨nh GBT.

    √Åp d·ª•ng c√°c k·ªπ thu·∫≠t t·ª´ d·ª± √°n nh√≥m 5 v·ªõi PySpark:
    1. X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu
    2. Chu·∫©n h√≥a ƒë·∫∑c tr∆∞ng
    3. One-hot encoding cho c√°c bi·∫øn ph√¢n lo·∫°i
    4. Bi·∫øn ƒë·ªïi log cho gi√° (v√† chuy·ªÉn ng∆∞·ª£c l·∫°i khi tr·∫£ k·∫øt qu·∫£)

    Parameters:
    - model: M√¥ h√¨nh Spark Pipeline ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán
    - input_data: Dictionary ch·ª©a th√¥ng tin b·∫•t ƒë·ªông s·∫£n c·∫ßn d·ª± ƒëo√°n gi√°

    Returns:
    - Gi√° tr·ªã d·ª± ƒëo√°n (float): Gi√° b·∫•t ƒë·ªông s·∫£n ƒë∆∞·ª£c d·ª± ƒëo√°n (VND/m¬≤)
    """
    try:
        # Ki·ªÉm tra xem d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i v√†o session_state ch∆∞a
        if 'data' not in st.session_state:
            st.error("D·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o trong session state")
            return 30000000  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh 30 tri·ªáu VND/m¬≤ n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
        data_copy = {k: [v] for k, v in input_data.items()}

        # T·∫°o pandas DataFrame
        input_df = pd.DataFrame(data_copy)

        # ƒê·∫£m b·∫£o t√™n c·ªôt ƒë√∫ng ƒë·ªãnh d·∫°ng
        if 'area' in input_df.columns and 'area (m2)' not in input_df.columns:
            input_df['area (m2)'] = input_df['area']

        if 'street' in input_df.columns and 'street (m)' not in input_df.columns:
            input_df['street (m)'] = input_df['street']

        # X·ª≠ l√Ω c√°c gi√° tr·ªã s·ªë
        for col in input_df.columns:
            if col in ["bedroom_num", "floor_num", "toilet_num", "livingroom_num"]:
                input_df[col] = input_df[col].fillna(-1).astype(int)

        # X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu cho c√°c tr∆∞·ªùng s·ªë
        cols_to_fix = ['bedroom_num', 'toilet_num', 'floor_num', 'livingroom_num']
        existing_cols = [col for col in cols_to_fix if col in input_df.columns]
        if existing_cols:
            input_df = handle_missing_numeric(input_df, existing_cols)

        # Ki·ªÉm tra n·∫øu c√≥ th·ªÉ s·ª≠ d·ª•ng Spark
        spark = get_spark_session_cached()

        if spark is not None:
            try:
                # Chuy·ªÉn ƒë·ªïi sang Spark DataFrame
                spark_df = convert_to_spark(input_df)

                # √âp ki·ªÉu d·ªØ li·ªáu
                for col in ["price_per_m2", "area (m2)"]:
                    if col in spark_df.columns:
                        spark_df = spark_df.withColumn(col, col(col).cast("double"))

                for col in ["floor_num", "toilet_num", "livingroom_num", "bedroom_num"]:
                    if col in spark_df.columns:
                        spark_df = spark_df.withColumn(col, col(col).cast("int"))

                if "street (m)" in spark_df.columns:
                    spark_df = spark_df.withColumn("street (m)", col("street (m)").cast("double"))

                # S·ª≠ d·ª•ng m√¥ h√¨nh ƒë·ªÉ d·ª± ƒëo√°n
                predictions = model.transform(spark_df)

                # L·∫•y gi√° tr·ªã d·ª± ƒëo√°n (ƒë√£ qua log transform)
                prediction_log = predictions.select("prediction").collect()[0][0]

                # Chuy·ªÉn t·ª´ log v·ªÅ gi√° tr·ªã th·ª±c
                from pyspark.sql.functions import expm1
                prediction_value = float(np.exp(prediction_log) - 1)

                return prediction_value

            except Exception as e:
                st.warning(f"L·ªói khi d·ª± ƒëo√°n v·ªõi Spark: {e}. S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng.")
                return fallback_prediction(input_data, st.session_state.data)
        else:
            # Spark kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng
            st.warning("Spark kh√¥ng kh·∫£ d·ª•ng. ƒêang s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng ƒë·ªÉ d·ª± ƒëo√°n gi√°.")
            return fallback_prediction(input_data, st.session_state.data)

    except Exception as e:
        st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")
        return 30000000  # Gi√° m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói

def fallback_prediction(input_data, data):
    """D·ª± ƒëo√°n gi√° s·ª≠ d·ª•ng m√¥ h√¨nh d·ª± ph√≤ng (fallback) khi kh√¥ng c√≥ Spark"""
    try:
        # Ki·ªÉm tra xem c√≥ s·∫µn m√¥ h√¨nh d·ª± ph√≤ng trong session_state kh√¥ng
        if ('model' in st.session_state and
            st.session_state.using_fallback and
            'fallback_features' in st.session_state and
            'fallback_uses_log' in st.session_state):

            import numpy as np
            import pandas as pd

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
            data_copy = {k: [v] for k, v in input_data.items()}
            input_df = pd.DataFrame(data_copy)

            # ƒê·∫£m b·∫£o t√™n c·ªôt ƒë√∫ng ƒë·ªãnh d·∫°ng
            if 'area' in input_df.columns and 'area (m2)' not in input_df.columns:
                input_df['area (m2)'] = input_df['area']

            if 'street' in input_df.columns and 'street (m)' not in input_df.columns:
                input_df['street (m)'] = input_df['street']

            # X·ª≠ l√Ω c√°c gi√° tr·ªã s·ªë
            for col in input_df.columns:
                if col in ["bedroom_num", "floor_num", "toilet_num", "livingroom_num"]:
                    input_df[col] = input_df[col].fillna(-1).astype(int)

            # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÅu c√≥
            all_features = st.session_state.fallback_features
            for col in all_features:
                if col not in input_df.columns:
                    # N·∫øu l√† c·ªôt s·ªë, ƒëi·ªÅn gi√° tr·ªã -1
                    if col in ["bedroom_num", "floor_num", "toilet_num", "livingroom_num", "area (m2)", "street (m)"]:
                        input_df[col] = -1
                    else:  # N·∫øu l√† c·ªôt ph√¢n lo·∫°i, ƒëi·ªÅn gi√° tr·ªã r·ªóng
                        input_df[col] = ''

            # N·∫øu c√≥ preprocessor, s·ª≠ d·ª•ng n√≥
            model = st.session_state.model

            # N·∫øu model l√† m·ªôt pipeline, s·ª≠ d·ª•ng predict tr·ª±c ti·∫øp
            if hasattr(model, 'predict'):
                # D·ª± ƒëo√°n gi√° trong log scale
                log_prediction = model.predict(input_df)

                # Chuy·ªÉn ƒë·ªïi t·ª´ log v·ªÅ gi√° th·ª±c t·∫ø
                if st.session_state.fallback_uses_log:
                    prediction = np.expm1(log_prediction[0])
                else:
                    prediction = log_prediction[0]

                return prediction
            else:
                # Fallback cho tr∆∞·ªùng h·ª£p kh√¥ng c√≥ m√¥ h√¨nh ho·∫∑c m√¥ h√¨nh kh√¥ng h·ª£p l·ªá
                return statistical_fallback(input_data, data)
        else:
            # Kh√¥ng c√≥ m√¥ h√¨nh, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p th·ªëng k√™
            return statistical_fallback(input_data, data)

    except Exception as e:
        st.error(f"L·ªói trong fallback_prediction: {e}")
        # Khi c√≥ l·ªói, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p th·ªëng k√™
        return statistical_fallback(input_data, data)


def statistical_fallback(input_data, data):
    """D·ª± ƒëo√°n gi√° s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p th·ªëng k√™ khi kh√¥ng c√≥ s·∫µn m√¥ h√¨nh"""
    try:
        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·∫ßu v√†o
        category = input_data.get('category', '')
        district = input_data.get('district', '')
        area = float(input_data.get('area', 0))

        # N·∫øu d·ªØ li·ªáu r·ªóng, tr·∫£ v·ªÅ 0
        if len(data) == 0 or area <= 0:
            return 0

        # L·ªçc d·ªØ li·ªáu theo lo·∫°i b·∫•t ƒë·ªông s·∫£n v√† qu·∫≠n/huy·ªán (n·∫øu c√≥)
        filtered_data = data.copy()

        if category and 'category' in filtered_data.columns:
            filtered_data = filtered_data[filtered_data['category'] == category]

        if district and 'district' in filtered_data.columns:
            filtered_data = filtered_data[filtered_data['district'] == district]

        # N·∫øu kh√¥ng c√≤n d·ªØ li·ªáu sau khi l·ªçc, s·ª≠ d·ª•ng to√†n b·ªô d·ªØ li·ªáu
        if len(filtered_data) == 0:
            filtered_data = data

        # T√≠nh gi√° trung b√¨nh tr√™n m¬≤
        avg_price_per_m2 = filtered_data['price_per_m2'].mean()

        # ƒêi·ªÅu ch·ªânh gi√° d·ª±a tr√™n c√°c y·∫øu t·ªë kh√°c
        # Y·∫øu t·ªë 1: S·ªë ph√≤ng ng·ªß
        bedroom_factor = 1.0
        if 'bedroom_num' in input_data and input_data['bedroom_num'] > 0:
            bedroom_num = int(input_data['bedroom_num'])
            if bedroom_num >= 3:
                bedroom_factor = 1.1  # TƒÉng 10% n·∫øu c√≥ t·ª´ 3 ph√≤ng ng·ªß tr·ªü l√™n
            elif bedroom_num <= 1:
                bedroom_factor = 0.9  # Gi·∫£m 10% n·∫øu ch·ªâ c√≥ 1 ph√≤ng ng·ªß

        # Y·∫øu t·ªë 2: H∆∞·ªõng nh√†
        direction_factor = 1.0
        good_directions = ['ƒê√¥ng', 'Nam', 'ƒê√¥ng Nam']
        if 'direction' in input_data and input_data['direction'] in good_directions:
            direction_factor = 1.05  # TƒÉng 5% n·∫øu h∆∞·ªõng t·ªët

        # Y·∫øu t·ªë 3: Di·ªán t√≠ch (nh√† nh·ªè th∆∞·ªùng c√≥ gi√° tr√™n m¬≤ cao h∆°n)
        area_factor = 1.0
        if area < 50:
            area_factor = 1.1  # TƒÉng 10% cho nh√† di·ªán t√≠ch nh·ªè
        elif area > 100:
            area_factor = 0.95  # Gi·∫£m 5% cho nh√† di·ªán t√≠ch l·ªõn

        # T√≠nh gi√° cu·ªëi c√πng
        base_price = avg_price_per_m2 * area * bedroom_factor * direction_factor * area_factor

        return base_price
    except Exception as e:
        st.error(f"L·ªói trong statistical_fallback: {e}")
        return 0

    return base_price

# MARK: - Main App Flow

# T·∫£i d·ªØ li·ªáu
data = load_data()

# L∆∞u d·ªØ li·ªáu v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c h√†m d·ª± ƒëo√°n
if 'data' not in st.session_state:
    st.session_state.data = data

# Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
if not data.empty:
    processed_data = preprocess_data(data)

    # Hu·∫•n luy·ªán m√¥ h√¨nh
    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n gi√°..."):
        model = train_model(processed_data)
        # L·∫•y c√°c metric t·ª´ session state sau khi hu·∫•n luy·ªán m√¥ h√¨nh
        if 'model_metrics' in st.session_state:
            r2_score = st.session_state.model_metrics['r2']
            rmse = st.session_state.model_metrics['rmse']
        else:
            r2_score = 0.0
            rmse = 0.0

else:
    st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ƒë·∫øn file d·ªØ li·ªáu.")
    st.stop()

# MARK: - Sidebar

st.sidebar.markdown("""
<div class="sidebar-header">
    <img src="https://img.icons8.com/fluency/96/000000/home.png" alt="Logo">
    <h2>BƒêS Vi·ªát Nam</h2>
    <p>AI D·ª± ƒêo√°n Gi√°</p>
    <p>Nh√≥m 05</p>
</div>
""", unsafe_allow_html=True)

# MARK: - C·∫•u h√¨nh giao di·ªán ng∆∞·ªùi d√πng

# Set session state for app_mode if it doesn't exist
if 'app_mode' not in st.session_state:
    st.session_state['app_mode'] = "D·ª± ƒëo√°n gi√°"

# Ph∆∞∆°ng th·ª©c ƒë·ªÉ c·∫≠p nh·∫≠t app_mode
def set_app_mode(mode):
    st.session_state['app_mode'] = mode

# L·∫•y mode hi·ªán t·∫°i
app_mode = st.session_state['app_mode']

# Danh s√°ch c√°c ch·∫ø ƒë·ªô ·ª©ng d·ª•ng
app_modes = ["D·ª± ƒëo√°n gi√°", "Tr·ª±c quan h√≥a", "V·ªÅ d·ª± √°n"]

# Container cho menu
menu_container = st.sidebar.container()

# T·∫°o c√°c button
for i, mode in enumerate(app_modes):
    if menu_container.button(mode, key=f"nav_{i}",
                        use_container_width=True,
                        on_click=set_app_mode,
                        args=(mode,)):
        pass

# Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh trong nh√≥m
st.sidebar.markdown('<div class="model-stats-container"><div class="metric-header"><div class="metric-icon"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21 16V8.00002C20.9996 7.6493 20.9071 7.30483 20.7315 7.00119C20.556 6.69754 20.3037 6.44539 20 6.27002L13 2.27002C12.696 2.09449 12.3511 2.00208 12 2.00208C11.6489 2.00208 11.304 2.09449 11 2.27002L4 6.27002C3.69626 6.44539 3.44398 6.69754 3.26846 7.00119C3.09294 7.30483 3.00036 7.6493 3 8.00002V16C3.00036 16.3508 3.09294 16.6952 3.26846 16.9989C3.44398 17.3025 3.69626 17.5547 4 17.73L11 21.73C11.304 21.9056 11.6489 21.998 12 21.998C12.3511 21.998 12.696 21.9056 13 21.73L20 17.73C20.3037 17.5547 20.556 17.3025 20.7315 16.9989C20.9071 16.6952 20.9996 16.3508 21 16Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></div><span class="metric-title">Th√¥ng s·ªë m√¥ h√¨nh</span></div>', unsafe_allow_html=True)

# Metrics ƒë·ªô ch√≠nh x√°c
st.sidebar.markdown("""
<div class="enhanced-metric-card blue-gradient">
    <div class="metric-header">
        <div class="metric-icon blue-icon-bg">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 17L12 22L22 17" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 12L12 17L22 12" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
        <span class="metric-title">R¬≤ Score</span>
    </div>
    <div class="clean-metric-value blue-value">{r2_score:.4f}</div>
</div>
""".format(r2_score=r2_score), unsafe_allow_html=True)

# Th√™m kho·∫£ng c√°ch gi·ªØa hai card th√¥ng s·ªë m√¥ h√¨nh
st.sidebar.markdown("""<div class="spacer-20"></div>""", unsafe_allow_html=True)

# Metrics ƒë·ªô l·ªách chu·∫©n - RMSE
st.sidebar.markdown("""
<div class="enhanced-metric-card purple-gradient">
    <div class="metric-header">
        <div class="metric-icon purple-icon-bg">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 9L12 2L21 9V20C21 20.5304 20.7893 21.0391 20.4142 21.4142C20.0391 21.7893 19.5304 22 19 22H5C4.46957 22 3.96086 21.7893 3.58579 21.4142C3.21071 21.0391 3 20.5304 3 20V9Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M9 22V12H15V22" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
        <span class="metric-title">RMSE</span>
    </div>
    <div class="clean-metric-value purple-value">{rmse:.4f}</div>
</div>
""".format(rmse=rmse), unsafe_allow_html=True)

# MARK: - Footer sidebar

# Footer
st.sidebar.markdown("""<hr class="hr-divider">""", unsafe_allow_html=True)
st.sidebar.markdown("""
<div class="flex-container">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="info-icon">
        <path d="M21 10C21 17 12 23 12 23C12 23 3 17 3 10C3 7.61305 3.94821 5.32387 5.63604 3.63604C7.32387 1.94821 9.61305 1 12 1C14.3869 1 16.6761 1.94821 18.364 3.63604C20.0518 5.32387 21 7.61305 21 10Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M12 13C13.6569 13 15 11.6569 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.6569 10.3431 13 12 13Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <span>nhadat.cafeland.vn</span>
</div>
""", unsafe_allow_html=True)
st.sidebar.markdown("</div>", unsafe_allow_html=True)

# MARK: - Ch·∫ø ƒë·ªô D·ª± ƒëo√°n gi√°

if app_mode == "D·ª± ƒëo√°n gi√°":
    # Ti√™u ƒë·ªÅ trang
    st.markdown("""
    <div class="modern-header">
        <div class="header-title">
            <div class="header-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
            </div>
            <div class="header-text">D·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n Vi·ªát Nam</div>
        </div>
        <div class="header-desc">
            H√£y nh·∫≠p th√¥ng tin v·ªÅ b·∫•t ƒë·ªông s·∫£n m√† b·∫°n quan t√¢m v√† ch√∫ng t√¥i s·∫Ω d·ª± ƒëo√°n gi√° tr·ªã th·ªã tr∆∞·ªùng d·ª±a tr√™n m√¥ h√¨nh h·ªçc m√°y ti√™n ti·∫øn c·ªßa ch√∫ng t√¥i.
        </div>
    </div>
    """, unsafe_allow_html=True)

    # T·∫°o layout v·ªõi 2 c·ªôt
    col1, col2 = st.columns([1, 1])

    with col1:
        # Card v·ªã tr√≠
        st.markdown("""
        <div class="input-card">
            <div class="card-header">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
                        <circle cx="12" cy="10" r="3"></circle>
                    </svg>
                </div>
                <div class="title">V·ªã tr√≠</div>
            </div>
        """, unsafe_allow_html=True)

        # Ch·ªçn t·ªânh/th√†nh ph·ªë
        city_options = sorted(data["city_province"].unique())
        city = st.selectbox("T·ªânh/Th√†nh ph·ªë", city_options, key='city')

        # L·ªçc qu·∫≠n/huy·ªán d·ª±a tr√™n t·ªânh/th√†nh ph·ªë ƒë√£ ch·ªçn
        district_options = sorted(data[data["city_province"] == city]["district"].unique())
        district = st.selectbox("Qu·∫≠n/Huy·ªán", district_options, key='district')

        st.markdown('</div>', unsafe_allow_html=True)

        # Card th√¥ng tin c∆° b·∫£n
        st.markdown("""
        <div class="input-card">
            <div class="card-header">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                </div>
                <div class="title">Th√¥ng tin c∆° b·∫£n</div>
            </div>
        """, unsafe_allow_html=True)

        # M·ªôt h√†ng 2 c·ªôt cho th√¥ng tin c∆° b·∫£n
        bc1, bc2 = st.columns(2)
        with bc1:
            area = st.number_input("Di·ªán t√≠ch (m¬≤)", min_value=10.0, max_value=1000.0, value=80.0, step=10.0, key='area')
        with bc2:
            category_options = sorted(data["category"].unique())
            category = st.selectbox("Lo·∫°i BƒêS", category_options, key='category')

        # H√†ng ti·∫øp theo
        bc3, bc4 = st.columns(2)
        with bc3:
            direction_options = sorted(data["direction"].unique())
            direction = st.selectbox("H∆∞·ªõng nh√†", direction_options, key='direction')
        with bc4:
            liability_options = sorted(data["liability"].unique())
            liability = st.selectbox("T√¨nh tr·∫°ng ph√°p l√Ω", liability_options, key='liability')

        st.markdown('</div>', unsafe_allow_html=True)


    with col2:
        # Card th√¥ng tin ph√≤ng ·ªëc
        st.markdown("""
        <div class="input-card">
            <div class="card-header">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9l-7-7z"></path>
                        <polyline points="13 2 13 9 20 9"></polyline>
                    </svg>
                </div>
                <div class="title">Th√¥ng tin ph√≤ng ·ªëc</div>
            </div>
        """, unsafe_allow_html=True)

        # H√†ng 1
        rc1, rc2 = st.columns(2)
        with rc1:
            bedroom_num = st.number_input("S·ªë ph√≤ng ng·ªß", min_value=0, max_value=10, value=2, step=1, key='bedroom')
        with rc2:
            toilet_num = st.number_input("S·ªë ph√≤ng v·ªá sinh", min_value=0, max_value=10, value=2, step=1, key='toilet')

        # H√†ng 2
        rc3, rc4 = st.columns(2)
        with rc3:
            livingroom_num = st.number_input("S·ªë ph√≤ng kh√°ch", min_value=0, max_value=10, value=1, step=1, key='livingroom')
        with rc4:
            floor_num = st.number_input("S·ªë t·∫ßng", min_value=0, max_value=50, value=2, step=1, key='floor')

        st.markdown('</div>', unsafe_allow_html=True)

        # Card th√¥ng tin khu v·ª±c
        st.markdown("""
        <div class="input-card">
            <div class="card-header">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="2" y1="12" x2="22" y2="12"></line>
                        <line x1="12" y1="2" x2="12" y2="22"></line>
                    </svg>
                </div>
                <div class="title">Th√¥ng tin khu v·ª±c</div>
            </div>
        """, unsafe_allow_html=True)

        # Th√¥ng tin chi·ªÅu r·ªông ƒë∆∞·ªùng
        street_width = st.number_input("Chi·ªÅu r·ªông ƒë∆∞·ªùng (m)",
                                    min_value=0.0, max_value=50.0, value=8.0, step=0.5, key='street')

        st.markdown('</div>', unsafe_allow_html=True)

    # S·ª≠ d·ª•ng c√°ch ti·∫øp c·∫≠n kh√°c cho n√∫t d·ª± ƒëo√°n
    st.markdown('<div style="padding: 10px 0 20px 0;"></div>', unsafe_allow_html=True)

    # C√°c n√∫t ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng t·ª´ file CSS ri√™ng
    st.markdown('<div class="prediction-button-wrapper"></div>', unsafe_allow_html=True)

    # N√∫t d·ª± ƒëo√°n
    if st.button("D·ª± ƒëo√°n gi√°", use_container_width=True, type="tertiary"):
        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
        input_data = {
            "area (m2)": area,
            "bedroom_num": bedroom_num,
            "floor_num": floor_num,
            "toilet_num": toilet_num,
            "livingroom_num": livingroom_num,
            "street (m)": street_width,
            "city_province": city,
            "district": district,
            "category": category,
            "direction": direction,
            "liability": liability,
            # C√°c tr∆∞·ªùng c·∫ßn thi·∫øt cho m√¥ h√¨nh
            "price_per_m2": 0,  # Gi√° tr·ªã n√†y s·∫Ω b·ªã b·ªè qua trong d·ª± ƒëo√°n
            "price_log": 0      # Gi√° tr·ªã n√†y s·∫Ω b·ªã b·ªè qua trong d·ª± ƒëo√°n
        }

        # D·ª± ƒëo√°n gi√°
        with st.spinner("ƒêang d·ª± ƒëo√°n gi√°..."):
            try:
                # Th√™m hi·ªáu ·ª©ng ch·ªù ƒë·ªÉ c·∫£i thi·ªán UX
                progress_bar = st.progress(0)
                for percent_complete in range(0, 101, 20):
                    time.sleep(0.1)  # T·∫°o ƒë·ªô tr·ªÖ gi·∫£ ƒë·ªÉ hi·ªáu ·ª©ng ƒë·∫πp h∆°n
                    progress_bar.progress(percent_complete)
                progress_bar.empty()  # X√≥a thanh ti·∫øn tr√¨nh sau khi ho√†n th√†nh

                # Th·ª±c hi·ªán d·ª± ƒëo√°n
                predicted_price_per_m2 = predict_price(model, input_data)

                # Ki·ªÉm tra k·∫øt qu·∫£ d·ª± ƒëo√°n kh√¥ng ph·∫£i l√† None
                if predicted_price_per_m2 is None:
                    st.error("Kh√¥ng th·ªÉ d·ª± ƒëo√°n gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.")
                else:
                    # T√≠nh to√°n gi√° d·ª± ƒëo√°n
                    # ƒê·∫£m b·∫£o predicted_price_per_m2 l√† gi√° tr·ªã s·ªë nguy√™n
                    predicted_price_per_m2 = int(round(predicted_price_per_m2))
                    total_price = int(round(predicted_price_per_m2 * area))
                    total_price_billion = total_price / 1_000_000_000

                    # H√†m ƒë·ªãnh d·∫°ng gi√° th√¥ng minh theo ƒë∆°n v·ªã
                    def format_price(price):
                        if price >= 1_000_000_000:  # Gi√° >= 1 t·ª∑
                            billions = price // 1_000_000_000
                            remaining = price % 1_000_000_000

                            if remaining == 0:
                                return f"{billions:,.0f} t·ª∑ VND"

                            millions = remaining // 1_000_000
                            if millions == 0:
                                return f"{billions:,.0f} t·ª∑ VND"
                            else:
                                return f"{billions:,.0f} t·ª∑ {millions:,.0f} tri·ªáu VND"
                        elif price >= 1_000_000:  # Gi√° >= 1 tri·ªáu
                            millions = price // 1_000_000
                            remaining = price % 1_000_000

                            if remaining == 0:
                                return f"{millions:,.0f} tri·ªáu VND"

                            thousands = remaining // 1_000
                            if thousands == 0:
                                return f"{millions:,.0f} tri·ªáu VND"
                            else:
                                return f"{millions:,.0f} tri·ªáu {thousands:,.0f} ngh√¨n VND"
                        elif price >= 1_000:  # Gi√° >= 1 ngh√¨n
                            return f"{price//1_000:,.0f} ngh√¨n VND"
                        else:
                            return f"{price:,.0f} VND"

                    # ƒê·ªãnh d·∫°ng gi√° t·ªïng
                    formatted_total_price = format_price(total_price)

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong container ƒë·∫πp v·ªõi giao di·ªán hi·ªán ƒë·∫°i
                    st.markdown(f'''
                    <div class="result-container">
                        <div class="result-header">
                            <svg class="result-header-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5 12H2V20H5V12Z" fill="currentColor"/>
                                <path d="M19 3H16V20H19V3Z" fill="currentColor"/>
                                <path d="M12 7H9V20H12V7Z" fill="currentColor"/>
                            </svg>
                            <div class="result-header-text">K·∫øt qu·∫£ d·ª± ƒëo√°n gi√°</div>
                        </div>
                        <div class="result-body">
                            <div class="price-grid">
                                <div class="price-card">
                                    <div class="price-label">Gi√° d·ª± ƒëo√°n / m¬≤</div>
                                    <div class="price-value">{predicted_price_per_m2:,.0f} VND</div>
                                </div>
                                <div class="price-card">
                                    <div class="price-label">T·ªïng gi√° d·ª± ƒëo√°n</div>
                                    <div class="price-value">{formatted_total_price}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    ''', unsafe_allow_html=True)

                # Hi·ªÉn th·ªã c√°c b·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª± v·ªõi ui m·ªõi
                similar_properties = data[
                    (data["city_province"] == city) &
                    (data["district"] == district) &
                    (data["area_m2"] > area * 0.7) &
                    (data["area_m2"] < area * 1.3)
                ]

                st.markdown('''
                <div class="similar-container">
                    <div class="similar-header">
                        <svg class="similar-header-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M14 2H6C4.9 2 4.01 2.9 4.01 4L4 20C4 21.1 4.89 22 5.99 22H18C19.1 22 20 21.1 20 20V8L14 2ZM18 20H6V4H13V9H18V20Z" fill="currentColor"/>
                            <path d="M11.5 14.5C11.5 15.33 10.83 16 10 16C9.17 16 8.5 15.33 8.5 14.5C8.5 13.67 9.17 13 10 13C10.83 13 11.5 13.67 11.5 14.5Z" fill="currentColor"/>
                            <path d="M14 14.5C14 13.12 12.88 12 11.5 12H8.5C7.12 12 6 13.12 6 14.5V16H14V14.5Z" fill="currentColor"/>
                        </svg>
                        <div class="similar-header-text">B·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª±</div>
                    </div>
                </div>
                ''', unsafe_allow_html=True)

                st.markdown('<div class="similar-data-wrapper">', unsafe_allow_html=True)
                if len(similar_properties) > 0:
                    similar_df = similar_properties[["area_m2", "price_per_m2", "bedroom_num", "floor_num", "category"]].head(5).reset_index(drop=True)
                    similar_df.columns = ["Di·ªán t√≠ch (m¬≤)", "Gi√°/m¬≤ (VND)", "S·ªë ph√≤ng ng·ªß", "S·ªë t·∫ßng", "Lo·∫°i BƒêS"]

                    # Format gi√° tr·ªã trong dataframe ƒë·ªÉ hi·ªÉn th·ªã t·ªët h∆°n
                    similar_df["Gi√°/m¬≤ (VND)"] = similar_df["Gi√°/m¬≤ (VND)"].apply(lambda x: f"{x:,.0f}")
                    similar_df["Di·ªán t√≠ch (m¬≤)"] = similar_df["Di·ªán t√≠ch (m¬≤)"].apply(lambda x: f"{x:.1f}")

                    st.dataframe(similar_df, use_container_width=True, hide_index=True)
                else:
                    st.info("Kh√¥ng t√¨m th·∫•y b·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª± trong d·ªØ li·ªáu.")
                st.markdown('</div>', unsafe_allow_html=True)

            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")

# MARK: - Ch·∫ø ƒë·ªô Tr·ª±c quan h√≥a

elif app_mode == "Tr·ª±c quan h√≥a":
    # Ti√™u ƒë·ªÅ trang
    statistics_header = """
    <div class="modern-header">
        <div class="header-title">
            <div class="header-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="18" y1="20" x2="18" y2="10"></line>
                    <line x1="12" y1="20" x2="12" y2="4"></line>
                    <line x1="6" y1="20" x2="6" y2="14"></line>
                    <line x1="2" y1="20" x2="22" y2="20"></line>
                </svg>
            </div>
            <div class="header-text">Ph√¢n t√≠ch d·ªØ li·ªáu</div>
        </div>
        <div class="header-desc">
            Ph√¢n t√≠ch d·ªØ li·ªáu b·∫•t ƒë·ªông s·∫£n t·∫°i Vi·ªát Nam
        </div>
    </div>
    """
    st.markdown(statistics_header, unsafe_allow_html=True)

    # T·∫°o tabs ƒë·ªÉ ph√¢n chia n·ªôi dung
    tab1, tab2 = st.tabs(["Gi√° BƒêS", "Khu v·ª±c"])

    with tab1:
        # Th√¥ng tin th·ªëng k√™ t·ªïng quan
        avg_price = data["price_per_m2"].mean()
        max_price = data["price_per_m2"].max()
        min_price = data["price_per_m2"].min()
        median_price = data["price_per_m2"].median()

        # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan trong grid
        st.markdown('<div style="height: 15px;"></div>', unsafe_allow_html=True)
        st.markdown("""
        <div class="data-grid">
            <div class="stat-card">
                <div class="stat-value">{:,.0f}</div>
                <div class="stat-label">Gi√° trung b√¨nh/m¬≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{:,.0f}</div>
                <div class="stat-label">Gi√° trung v·ªã/m¬≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{:,.0f}</div>
                <div class="stat-label">Gi√° cao nh·∫•t/m¬≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{:,d}</div>
                <div class="stat-label">T·ªïng s·ªë BƒêS</div>
            </div>
        </div>
        """.format(avg_price, median_price, max_price, len(data)), unsafe_allow_html=True)

        # Card 1: Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√°
        st.markdown("""
        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M3 3v18h18"></path>
                        <path d="M18 12h-2"></path>
                        <path d="M13 8h-2"></path>
                        <path d="M8 16H6"></path>
                    </svg>
                </div>
                <div class="chart-title-container">
                    <div class="chart-title">Ph√¢n ph·ªëi gi√° b·∫•t ƒë·ªông s·∫£n</div>
                    <div class="chart-desc">So s√°nh ph√¢n ph·ªëi gi√° g·ªëc v√† ph√¢n ph·ªëi gi√° sau bi·∫øn ƒë·ªïi logarit</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√°
        fig, ax = plt.subplots(1, 2, figsize=(14, 6))

        # Ph√¢n ph·ªëi gi√° ban ƒë·∫ßu
        sns.histplot(data["price_per_m2"], kde=True, ax=ax[0])
        ax[0].set_title("Ph√¢n ph·ªëi gi√° / m¬≤")
        ax[0].set_xlabel("Gi√° (VND/m¬≤)")
        ax[0].set_ylabel("S·ªë l∆∞·ª£ng")

        # Ph√¢n ph·ªëi gi√° sau khi bi·∫øn ƒë·ªïi log
        sns.histplot(np.log1p(data["price_per_m2"]), kde=True, ax=ax[1])
        ax[1].set_title("Ph√¢n ph·ªëi logarit c·ªßa gi√° / m¬≤")
        ax[1].set_xlabel("ln(Gi√°/m¬≤)")
        ax[1].set_ylabel("S·ªë l∆∞·ª£ng")

        plt.tight_layout()
        st.pyplot(fig)

        # Th√™m kho·∫£ng tr·ªëng
        st.markdown('<div style="height: 30px;"></div>', unsafe_allow_html=True)

        # Card 2: L·ªçc theo kho·∫£ng gi√°
        st.markdown("""
        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="3" width="7" height="7"></rect>
                        <rect x="14" y="3" width="7" height="7"></rect>
                        <rect x="14" y="14" width="7" height="7"></rect>
                        <rect x="3" y="14" width="7" height="7"></rect>
                    </svg>
                </div>
                <div class="chart-title-container">
                    <div class="chart-title">L·ªçc d·ªØ li·ªáu theo kho·∫£ng gi√°</div>
                    <div class="chart-desc">T√¨m ki·∫øm b·∫•t ƒë·ªông s·∫£n trong kho·∫£ng gi√° mong mu·ªën</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        price_range = st.slider(
            "Ch·ªçn kho·∫£ng gi√° (VND/m¬≤)",
            min_value=float(data["price_per_m2"].min()),
            max_value=float(data["price_per_m2"].max()),
            value=(float(data["price_per_m2"].quantile(0.25)), float(data["price_per_m2"].quantile(0.75)))
        )

        # Th√™m kho·∫£ng tr·ªëng sau slider
        st.markdown('<div style="height: 15px;"></div>', unsafe_allow_html=True)

        # L·ªçc d·ªØ li·ªáu theo kho·∫£ng gi√° ƒë√£ ch·ªçn
        filtered_data = data[(data["price_per_m2"] >= price_range[0]) & (data["price_per_m2"] <= price_range[1])]

        # T√≠nh to√°n ph·∫ßn trƒÉm
        total_count = len(data)
        filtered_count = len(filtered_data)
        percentage = (filtered_count / total_count) * 100 if total_count > 0 else 0

        # Th√™m kho·∫£ng tr·ªëng tr∆∞·ªõc th√¥ng b√°o t√¨m ki·∫øm
        st.markdown('<div style="height: 10px;"></div>', unsafe_allow_html=True)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
        st.markdown(f"""
        <div style="display: flex; align-items: center; background-color: #1E293B; border-radius: 12px; padding: 15px; margin-bottom: 25px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); border-left: 4px solid #4C9AFF;">
            <div style="background-color: rgba(76, 154, 255, 0.15); width: 42px; height: 42px; border-radius: 50%; display: flex; justify-content: center; align-items: center; margin-right: 16px;">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#4C9AFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </div>
            <div>
                <div style="font-size: 16px; font-weight: 500; color: #E2E8F0; margin-bottom: 5px;">
                    ƒê√£ t√¨m th·∫•y <span style="font-weight: 700; color: #4C9AFF;">{filtered_count:,}</span> b·∫•t ƒë·ªông s·∫£n
                </div>
                <div style="font-size: 13px; color: #94A3B8;">
                    Trong kho·∫£ng gi√° ƒë√£ ch·ªçn ‚Ä¢ Chi·∫øm <span style="font-weight: 600; color: #A5B4FC;">{int(percentage)}%</span> t·ªïng s·ªë d·ªØ li·ªáu
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        # Th√™m kho·∫£ng tr·ªëng sau th√¥ng b√°o
        st.markdown('<div style="height: 10px;"></div>', unsafe_allow_html=True)

        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ d·ªØ li·ªáu ƒë√£ l·ªçc trong m·ªôt d√≤ng
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown(f"""
            <div class="stat-card" style="margin: 0 0 30px 0; width: 100%;">
                <div class="stat-value">{len(filtered_data):,}</div>
                <div class="stat-label">S·ªë l∆∞·ª£ng BƒêS</div>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            st.markdown(f"""
            <div class="stat-card" style="margin: 0 0 30px 0; width: 100%;">
                <div class="stat-value">{filtered_data['price_per_m2'].mean():,.0f}</div>
                <div class="stat-label">Gi√° trung b√¨nh/m¬≤ (VND)</div>
            </div>
            """, unsafe_allow_html=True)
        with col3:
            st.markdown(f"""
            <div class="stat-card" style="margin: 0 0 30px 0; width: 100%;">
                <div class="stat-value">{filtered_data['area_m2'].mean():.1f}</div>
                <div class="stat-label">Di·ªán t√≠ch trung b√¨nh (m¬≤)</div>
            </div>
            """, unsafe_allow_html=True)

        # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc v·ªõi card
        st.markdown("""
        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="8" y1="6" x2="21" y2="6"></line>
                        <line x1="8" y1="12" x2="21" y2="12"></line>
                        <line x1="8" y1="18" x2="21" y2="18"></line>
                        <line x1="3" y1="6" x2="3.01" y2="6"></line>
                        <line x1="3" y1="12" x2="3.01" y2="12"></line>
                        <line x1="3" y1="18" x2="3.01" y2="18"></line>
                    </svg>
                </div>
                <div class="chart-title-container">
                    <div class="chart-title">D·ªØ li·ªáu b·∫•t ƒë·ªông s·∫£n ƒë√£ l·ªçc</div>
                    <div class="chart-desc">Danh s√°ch 10 b·∫•t ƒë·ªông s·∫£n ƒë·∫ßu ti√™n trong kho·∫£ng gi√° ƒë√£ ch·ªçn</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        st.dataframe(filtered_data[["city_province", "district", "area_m2", "price_per_m2", "category"]].head(10), use_container_width=True)

    with tab2:
        # T·ªïng h·ª£p th√¥ng tin theo khu v·ª±c
        total_provinces = data["city_province"].nunique()
        total_districts = data["district"].nunique()
        top_province = data["city_province"].value_counts().index[0]
        top_district = data["district"].value_counts().index[0]

        # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan trong grid
        st.markdown('<div style="height: 15px;"></div>', unsafe_allow_html=True)
        st.markdown("""
        <div class="data-grid">
            <div class="stat-card">
                <div class="stat-value">{:,d}</div>
                <div class="stat-label">T·ªïng s·ªë t·ªânh/TP</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{:,d}</div>
                <div class="stat-label">T·ªïng s·ªë qu·∫≠n/huy·ªán</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">Khu v·ª±c ph·ªï bi·∫øn nh·∫•t</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">Qu·∫≠n/huy·ªán ph·ªï bi·∫øn nh·∫•t</div>
            </div>
        </div>
        """.format(total_provinces, total_districts, top_province, top_district), unsafe_allow_html=True)

        # Card 1: Gi√° trung b√¨nh theo t·ªânh/th√†nh ph·ªë
        st.markdown("""
        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="2" y="7" width="3" height="10"></rect>
                        <rect x="8" y="5" width="3" height="12"></rect>
                        <rect x="14" y="3" width="3" height="14"></rect>
                        <rect x="20" y="9" width="3" height="8"></rect>
                    </svg>
                </div>
                <div class="chart-title-container">
                    <div class="chart-title">Gi√° trung b√¨nh theo t·ªânh/th√†nh ph·ªë</div>
                    <div class="chart-desc">Top 10 t·ªânh/th√†nh ph·ªë c√≥ gi√° b·∫•t ƒë·ªông s·∫£n cao nh·∫•t</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        # T√≠nh gi√° trung b√¨nh theo t·ªânh/th√†nh ph·ªë
        city_price = data.groupby("city_province")["price_per_m2"].mean().sort_values(ascending=False).reset_index()
        city_price.columns = ["T·ªânh/Th√†nh ph·ªë", "Gi√° trung b√¨nh/m¬≤"]

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = px.bar(
            city_price.head(10),
            x="T·ªânh/Th√†nh ph·ªë",
            y="Gi√° trung b√¨nh/m¬≤",
            color="Gi√° trung b√¨nh/m¬≤",
            color_continuous_scale='Viridis',
            template="plotly_white"
        )

        # C·∫≠p nh·∫≠t layout c·ªßa bi·ªÉu ƒë·ªì
        fig.update_layout(
            margin=dict(t=0, b=0, l=0, r=0),
            coloraxis_colorbar=dict(tickfont=dict(color='#333333'))
        )
        st.plotly_chart(fig, use_container_width=True)

        # Th√™m kho·∫£ng tr·ªëng
        st.markdown('<div style="height: 30px;"></div>', unsafe_allow_html=True)

        # Card 2: Gi√° trung b√¨nh theo qu·∫≠n/huy·ªán
        st.markdown("""
        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path>
                        <circle cx="12" cy="12" r="4"></circle>
                    </svg>
                </div>
                <div class="chart-title-container">
                    <div class="chart-title">Gi√° trung b√¨nh theo qu·∫≠n/huy·ªán</div>
                    <div class="chart-desc">Ph√¢n t√≠ch chi ti·∫øt theo khu v·ª±c ƒë√£ ch·ªçn</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        # Ch·ªçn t·ªânh/th√†nh ph·ªë ƒë·ªÉ xem chi ti·∫øt
        selected_city = st.selectbox("Ch·ªçn t·ªânh/th√†nh ph·ªë", sorted(data["city_province"].unique()))

        # L·ªçc d·ªØ li·ªáu theo t·ªânh/th√†nh ph·ªë ƒë√£ ch·ªçn
        city_data = data[data["city_province"] == selected_city]

        # T√≠nh gi√° trung b√¨nh theo qu·∫≠n/huy·ªán
        district_price = city_data.groupby("district")["price_per_m2"].mean().sort_values(ascending=False).reset_index()
        district_price.columns = ["Qu·∫≠n/Huy·ªán", "Gi√° trung b√¨nh/m¬≤"]

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = px.bar(
            district_price,
            x="Qu·∫≠n/Huy·ªán",
            y="Gi√° trung b√¨nh/m¬≤",
            color="Gi√° trung b√¨nh/m¬≤",
            color_continuous_scale='Viridis',
            template="plotly_white"
        )

        # C·∫≠p nh·∫≠t layout c·ªßa bi·ªÉu ƒë·ªì
        fig.update_layout(
            margin=dict(t=0, b=0, l=0, r=0),
            coloraxis_colorbar=dict(tickfont=dict(color='#333333'))
        )
        st.plotly_chart(fig, use_container_width=True)

# MARK: - Ch·∫ø ƒë·ªô V·ªÅ d·ª± √°n

elif app_mode == "V·ªÅ d·ª± √°n":
    # Kh·ªëi header v·ªõi logo v√† ti√™u ƒë·ªÅ
    st.markdown("""
    <div class="about-header">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/Flag_of_Vietnam.svg/1200px-Flag_of_Vietnam.svg.png" width="100">
        <div class="about-header-text">
            <h1>D·ª± ƒëo√°n gi√° BƒêS Vi·ªát Nam</h1>
            <p>H·ªá th·ªëng d·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n d·ª±a tr√™n h·ªçc m√°y v√† Apache Spark</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Gi·ªõi thi·ªáu t·ªïng quan
    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 9.3V4h-3v2.6L12 3L2 12h3v8h6v-6h2v6h6v-8h3L19 9.3zM17 18h-2v-6H9v6H7v-7.81l5-4.5 5 4.5V18z" fill="currentColor"/>
            </svg>
            <h2>Gi·ªõi thi·ªáu d·ª± √°n</h2>
        </div>
        <div class="about-card-content">
            <p>ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng <strong>demo</strong> cho m√¥ h√¨nh d·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n t·∫°i Vi·ªát Nam s·ª≠ d·ª•ng h·ªçc m√°y.</p>
            <p>·ª®ng d·ª•ng l√† m·ªôt ph·∫ßn c·ªßa <strong>d·ª± √°n nghi√™n c·ª©u</strong> nh·∫±m khai th√°c d·ªØ li·ªáu l·ªõn trong ph√¢n t√≠ch th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n.</p>
            <p>M·ª•c ti√™u d·ª± √°n:</p>
            <ul>
                <li>X√¢y d·ª±ng m√¥ h√¨nh d·ª± ƒëo√°n ch√≠nh x√°c gi√° b·∫•t ƒë·ªông s·∫£n t·∫°i Vi·ªát Nam</li>
                <li>T√¨m hi·ªÉu c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° b·∫•t ƒë·ªông s·∫£n</li>
                <li>T·∫°o n·ªÅn t·∫£ng thu th·∫≠p v√† ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng BDS t·ª± ƒë·ªông</li>
            </ul>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # C√¥ng ngh·ªá s·ª≠ d·ª•ng
    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z" fill="currentColor"/>
            </svg>
            <h2>C√¥ng ngh·ªá s·ª≠ d·ª•ng</h2>
        </div>
        <div class="about-card-content">
            <p>D·ª± √°n s·ª≠ d·ª•ng c√°c c√¥ng ngh·ªá hi·ªán ƒë·∫°i ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn v√† h·ªçc m√°y:</p>
            <div style="margin-top: 15px;">
                <span class="tech-tag">Selenium</span>
                <span class="tech-tag">BeautifulSoup</span>
                <span class="tech-tag">Apache Spark</span>
                <span class="tech-tag">PySpark</span>
                <span class="tech-tag">Gradient Boosted Trees</span>
                <span class="tech-tag">Random Forest</span>
                <span class="tech-tag">Linear Regression</span>
                <span class="tech-tag">Streamlit</span>
                <span class="tech-tag">Ngrok</span>
                <span class="tech-tag">Python</span>
            </div>
            <p style="margin-top: 15px;">T·ª´ gi·∫£i ph√°p thu th·∫≠p d·ªØ li·ªáu, ƒë·∫øn xem x√©t d·ªØ li·ªáu l·ªõn, x√¢y d·ª±ng m√¥ h√¨nh v√† cung c·∫•p giao di·ªán ng∆∞·ªùi d√πng, d·ª± √°n ƒë∆∞·ª£c ph√°t tri·ªÉn v·ªõi c√°c c√¥ng ngh·ªá t·ªët nh·∫•t trong lƒ©nh v·ª±c.</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Th√™m th√†nh vi√™n nh√≥m
    st.markdown("""
        <div class="about-card">
            <div class="about-card-title">
                <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z" fill="currentColor"/>
                </svg>
                <h2>Th√†nh vi√™n nh√≥m</h2>
            </div>
            <div class="about-card-content">
                <ul style="margin-top: 10px; list-style-type: none; padding-left: 0;">
                    <li style="margin-bottom: 20px;">
                        <div style="display: flex; align-items: center;">
                            <img src="https://github.com/lcg1908.png" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 15px; border: 2px solid #4c9aff;">
                            <div>
                                <strong>L√™ Th·ªã C·∫©m Giang</strong>
                                <p style="margin: 0;"><a href="https://github.com/lcg1908" style="color: #4c9aff; text-decoration: none;">github.com/lcg1908</a></p>
                            </div>
                        </div>
                    </li>
                    <li style="margin-bottom: 20px;">
                        <div style="display: flex; align-items: center;">
                            <img src="https://github.com/Quynanhng25.png" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 15px; border: 2px solid #4c9aff;">
                            <div>
                                <strong>Nguy·ªÖn Qu·ª≥nh Anh</strong>
                                <p style="margin: 0;"><a href="https://github.com/Quynanhng25" style="color: #4c9aff; text-decoration: none;">github.com/Quynanhng25</a></p>
                            </div>
                        </div>
                    </li>
                    <li style="margin-bottom: 20px;">
                        <div style="display: flex; align-items: center;">
                            <img src="https://github.com/CaoHoaiDuyen.png" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 15px; border: 2px solid #4c9aff;">
                            <div>
                                <strong>Nguy·ªÖn Cao Ho√†i Duy√™n</strong>
                                <p style="margin: 0;"><a href="https://github.com/CaoHoaiDuyen" style="color: #4c9aff; text-decoration: none;">github.com/CaoHoaiDuyen</a></p>
                            </div>
                        </div>
                    </li>
                    <li style="margin-bottom: 20px;">
                        <div style="display: flex; align-items: center;">
                            <img src="https://github.com/QHoa036.png" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 15px; border: 2px solid #4c9aff;">
                            <div>
                                <strong>ƒêinh Tr∆∞∆°ng Ng·ªçc Qu·ª≥nh Hoa</strong>
                                <p style="margin: 0;"><a href="https://github.com/QHoa036" style="color: #4c9aff; text-decoration: none;">github.com/QHoa036</a></p>
                            </div>
                        </div>
                    </li>
                    <li style="margin-bottom: 20px;">
                        <div style="display: flex; align-items: center;">
                            <img src="https://github.com/thaonguyenbi.png" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 15px; border: 2px solid #4c9aff;">
                            <div>
                                <strong>Nguy·ªÖn Ph∆∞∆°ng Th·∫£o</strong>
                                <p style="margin: 0;"><a href="https://github.com/thaonguyenbi" style="color: #4c9aff; text-decoration: none;">github.com/thaonguyenbi</a></p>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)

    # B·ªô d·ªØ li·ªáu
    # ƒê·∫£m b·∫£o t·∫•t c·∫£ th√¥ng tin v·ªÅ d·ªØ li·ªáu n·∫±m trong card
    dataset_data_count = f"{len(data):,}"

    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z" fill="currentColor"/>
                <path d="M7 10h2v7H7zm4-3h2v10h-2zm4 6h2v4h-2z" fill="currentColor"/>
            </svg>
            <h2>B·ªô d·ªØ li·ªáu</h2>
        </div>
        <div class="about-card-content">
            <p>B·ªô d·ªØ li·ªáu g·ªìm th√¥ng tin v·ªÅ h∆°n <strong>{dataset_data_count} b·∫•t ƒë·ªông s·∫£n</strong> ƒë∆∞·ª£c thu th·∫≠p t·ª´ website <a href="https://nhadat.cafeland.vn" style="color: #4c9aff; text-decoration: none;">nhadat.cafeland.vn</a>.</p>
            <p>D·ªØ li·ªáu bao g·ªìm c√°c thu·ªôc t√≠nh ch√≠nh:</p>
            <ul>
                <li><strong>V·ªã tr√≠:</strong> T·ªânh/th√†nh, Qu·∫≠n/huy·ªán</li>
                <li><strong>ƒê·∫∑c ƒëi·ªÉm:</strong> Di·ªán t√≠ch, S·ªë ph√≤ng, S·ªë t·∫ßng</li>
                <li><strong>Ph√¢n lo·∫°i:</strong> Lo·∫°i b·∫•t ƒë·ªông s·∫£n, H∆∞·ªõng nh√†</li>
                <li><strong>Gi√° tr·ªã:</strong> Gi√°/m¬≤</li>
        </div>
        <p>D·ªØ li·ªáu ƒë∆∞·ª£c thu th·∫≠p v√† l√†m s·∫°ch, sau ƒë√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n ch√≠nh x√°c.</p>
    </div>
    """, unsafe_allow_html=True)

    # Quy tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu
    # ƒê·ªãnh d·∫°ng c√°c gi√° tr·ªã m√¥ h√¨nh
    r2_score_formatted = "{:.4f}".format(r2_score) if 'r2_score' in globals() else "0.8765"
    rmse_formatted = "{:.4f}".format(rmse) if 'rmse' in globals() else "0.1234"

    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-2 14l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z" fill="currentColor"/>
            </svg>
            <h2>Quy tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu</h2>
        </div>
        <div class="about-card-content">
            <ol style="padding-left: 1.5rem;">
                <li>
                    <strong>Thu th·∫≠p d·ªØ li·ªáu</strong>:
                    <p>Web scraping t·ª´ c√°c trang b·∫•t ƒë·ªông s·∫£n s·ª≠ d·ª•ng Selenium v√† BeautifulSoup</p>
                </li>
                <li>
                    <strong>L√†m s·∫°ch d·ªØ li·ªáu</strong>:
                    <p>Lo·∫°i b·ªè gi√° tr·ªã thi·∫øu, chu·∫©n h√≥a ƒë·ªãnh d·∫°ng, x·ª≠ l√Ω ngo·∫°i l·ªá ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng cao</p>
                </li>
                <li>
                    <strong>T·∫°o ƒë·∫∑c tr∆∞ng</strong>:
                    <p>Feature engineering & encoding ƒë·ªÉ bi·∫øn ƒë·ªïi d·ªØ li·ªáu th√¥ th√†nh c√°c ƒë·∫∑c tr∆∞ng h·ªØu √≠ch cho m√¥ h√¨nh</p>
                </li>
                <li>
                    <strong>Hu·∫•n luy·ªán m√¥ h√¨nh</strong>:
                    <p>S·ª≠ d·ª•ng Gradient Boosted Trees v√† c√°c thu·∫≠t to√°n h·ªçc m√°y ti√™n ti·∫øn</p>
                </li>
            </ol>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M21 5c-1.11-.35-2.33-.5-3.5-.5-1.95 0-4.05.4-5.5 1.5-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5 1.35-.85 3.8-1.5 5.5-1.5 1.65 0 3.35.3 4.75 1.05.1.05.15.05.25.05.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1zm0 13.5c-1.1-.35-2.3-.5-3.5-.5-1.7 0-4.15.65-5.5 1.5V8c1.35-.85 3.8-1.5 5.5-1.5 1.2 0 2.4.15 3.5.5v11.5z" fill="currentColor"/>
                <path d="M17.5 10.5c.88 0 1.73.09 2.5.26V9.24c-.79-.15-1.64-.24-2.5-.24-1.7 0-3.24.29-4.5.83v1.66c1.13-.64 2.7-.99 4.5-.99zM13 12.49v1.66c1.13-.64 2.7-.99 4.5-.99.88 0 1.73.09 2.5.26V11.9c-.79-.15-1.64-.24-2.5-.24-1.7 0-3.24.3-4.5.83zm4.5 1.84c-1.7 0-3.24.29-4.5.83v1.66c1.13-.64 2.7-.99 4.5-.99.88 0 1.73.09 2.5.26v-1.52c-.79-.16-1.64-.24-2.5-.24z" fill="currentColor"/>
            </svg>
            <h2>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h2>
        </div>
        <div class="about-card-content">
            <p>·ª®ng d·ª•ng c√≥ giao di·ªán tr·ª±c quan v√† d·ªÖ s·ª≠ d·ª•ng:</p>
            <ul style="margin-top: 10px;">
                <li>
                    <strong>D·ª± ƒëo√°n gi√°:</strong>
                    <p>Ch·ªçn tab "D·ª± ƒëo√°n gi√°" ·ªü thanh b√™n tr√°i, nh·∫≠p th√¥ng tin v√† nh·∫•n n√∫t d·ª± ƒëo√°n ƒë·ªÉ xem k·∫øt qu·∫£.</p>
                </li>
                <li>
                    <strong>Ph√¢n t√≠ch d·ªØ li·ªáu:</strong>
                    <p>Ch·ªçn tab "Ph√¢n t√≠ch d·ªØ li·ªáu" ƒë·ªÉ kh√°m ph√° c√°c bi·ªÉu ƒë·ªì v√† xu h∆∞·ªõng th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n.</p>
                </li>
                <li>
                    <strong>Chia s·∫ª ·ª©ng d·ª•ng:</strong>
                    <p>S·ª≠ d·ª•ng Ngrok ƒë·ªÉ t·∫°o URL public v√† chia s·∫ª ·ª©ng d·ª•ng v·ªõi ng∆∞·ªùi kh√°c.</p>
                </li>
            </ul>
            <div style="margin-top: 15px; padding: 10px; background: rgba(255, 193, 7, 0.15); border-left: 3px solid #FFC107; border-radius: 4px;">
                <strong style="color: #FFC107;">L∆∞u √Ω:</strong>    ƒê·ªÉ c√≥ k·∫øt qu·∫£ d·ª± ƒëo√°n ch√≠nh x√°c, h√£y nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c th√¥ng tin chi ti·∫øt v·ªÅ b·∫•t ƒë·ªông s·∫£n.
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)